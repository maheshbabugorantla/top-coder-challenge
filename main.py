import json
import numpy as np
import sys
import os # For file existence check

# Custom module imports
try:
    from load_data import load_data
except ImportError:
    print("Error: load_data.py not found. Please ensure it's in the same directory or PYTHONPATH.")
    sys.exit(1)

try:
    from feature_engineering import engineer_features
except ImportError:
    print("Error: feature_engineering.py not found. Please ensure it's in the same directory or PYTHONPATH.")
    sys.exit(1)

# Attempt to import the model's prediction function
predict_reimbursement = None
try:
    from reimbursement_model import score as predict_reimbursement_func
    predict_reimbursement = predict_reimbursement_func
    print("Successfully imported 'predict_reimbursement' (score function from reimbursement_model.py).")
except ImportError:
    print("Error: reimbursement_model.py not found. This file is generated by convert_model.py.")
    print("Please run convert_model.py first to generate the model code.")
    # No sys.exit(1) here, will check predict_reimbursement in main.
except AttributeError:
    print("Error: 'score' function not found in reimbursement_model.py. The file might be corrupted or outdated.")
    print("Please re-run convert_model.py.")
    # No sys.exit(1) here.

def generate_predictions(input_file_path: str) -> list[dict]:
    """
    Loads data, engineers features, and generates predictions using the m2cgen model.

    Args:
        input_file_path: Path to the input JSON data file.

    Returns:
        A list of dictionaries, where each dictionary contains the input and its prediction.
    """
    if not predict_reimbursement:
        print("Prediction function is not available. Cannot generate predictions.")
        return []

    print(f"Loading data from: {input_file_path}")
    try:
        initial_features, _, raw_inputs = load_data(input_file_path) # Targets are not needed
    except FileNotFoundError:
        print(f"Error: Input data file not found at {input_file_path}.")
        return []
    except Exception as e:
        print(f"Error loading data: {e}")
        return []

    if not raw_inputs:
        print("No data loaded from file. Nothing to predict.")
        return []

    print("Engineering features...")
    engineered_X = engineer_features(raw_inputs, initial_features)

    # Convert to NumPy array for consistency, though m2cgen model expects a list
    X_to_predict = np.array(engineered_X, dtype=np.float64)

    print("Making predictions...")
    predictions_output = []
    for i, record_features in enumerate(X_to_predict):
        # The m2cgen model's 'score' function typically expects a list of features
        prediction = predict_reimbursement(record_features.tolist())
        predictions_output.append({
            "input": raw_inputs[i],
            "prediction": prediction
        })

    print(f"Generated {len(predictions_output)} predictions.")
    return predictions_output

if __name__ == "__main__":
    if not predict_reimbursement:
        print("\nExiting: Model's prediction function ('score' from reimbursement_model.py) is not loaded.")
        sys.exit(1)

    if len(sys.argv) > 1:
        input_json_file = sys.argv[1]
        print(f"Input file provided via command line: {input_json_file}")
    else:
        input_json_file = "private_cases.json" # Default to private_cases.json
        print(f"No input file provided via command line, defaulting to '{input_json_file}'")

    # Check if the default private_cases.json exists, if used
    if input_json_file == "private_cases.json" and not os.path.exists(input_json_file):
        print(f"Warning: Default file '{input_json_file}' not found.")
        print("Creating a dummy 'private_cases.json' for demonstration purposes.")
        # This dummy data should have the same structure as public_cases.json
        dummy_private_data = [
            {
                "input": {
                    "trip_duration_days": 3,
                    "miles_traveled": 150,
                    "total_receipts_amount": 99.99
                }
                # No "expected_output" here, as it's for prediction
            },
            {
                "input": {
                    "trip_duration_days": 1,
                    "miles_traveled": 20,
                    "total_receipts_amount": 30.00
                }
            }
        ]
        try:
            with open(input_json_file, "w") as f_dummy:
                json.dump(dummy_private_data, f_dummy, indent=2)
            print(f"Dummy '{input_json_file}' created with 2 records.")

        except IOError as e:
            print(f"Error creating dummy file: {e}")
            sys.exit(1)

    results = generate_predictions(input_json_file)

    if results:
        print("\nPredictions output:")
        print(json.dumps(results, indent=2))
    else:
        print("\nNo results to print.")

    # Clean up dummy private_cases.json if it was created by this script
    if input_json_file == "private_cases.json" and 'dummy_private_data' in locals():
        try:
            # A small check to ensure we don't delete a user's file if it happened to be named private_cases.json
            # and was NOT created by this script (though this is a simple check)
            with open(input_json_file, 'r') as f_check:
                content = json.load(f_check)
                if content == dummy_private_data: # type: ignore
                    os.remove(input_json_file)
                    print(f"\nDummy '{input_json_file}' has been removed.")
        except Exception as e:
            print(f"Could not remove dummy file: {e}")
